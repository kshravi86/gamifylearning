name: iOS Build and Archive

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  build:
    name: Build iOS App
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Show Xcode version
      run: xcodebuild -version
      
    - name: Show available schemes
      run: xcodebuild -list -project NotesApp.xcodeproj
      
    - name: Clean build folder
      run: xcodebuild clean -project NotesApp.xcodeproj -scheme NotesApp
      
    - name: Build for simulator (Debug)
      run: |
        xcodebuild build \
          -project NotesApp.xcodeproj \
          -scheme NotesApp \
          -configuration Debug \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest'
          
    - name: Run tests
      run: |
        xcodebuild test \
          -project NotesApp.xcodeproj \
          -scheme NotesApp \
          -configuration Debug \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=latest'
      continue-on-error: true
      
    # For unsigned builds (development/testing)
    - name: Build for device (Debug - Unsigned)
      run: |
        xcodebuild archive \
          -project NotesApp.xcodeproj \
          -scheme NotesApp \
          -configuration Debug \
          -destination 'generic/platform=iOS' \
          -archivePath ${{ runner.temp }}/NotesApp-Debug.xcarchive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
          
    - name: Create unsigned IPA manually
      run: |
        # Create IPA from the app bundle
        mkdir -p ${{ runner.temp }}/Payload
        cp -r ${{ runner.temp }}/NotesApp-Debug.xcarchive/Products/Applications/NotesApp.app ${{ runner.temp }}/Payload/
        cd ${{ runner.temp }}
        zip -r NotesApp-Debug.ipa Payload/
        mkdir -p export-debug
        mv NotesApp-Debug.ipa export-debug/
      
    # Upload build artifacts
    - name: Upload Debug Archive
      uses: actions/upload-artifact@v4
      with:
        name: QuizApp-Debug-Archive
        path: ${{ runner.temp }}/NotesApp-Debug.xcarchive
        retention-days: 30
        
    - name: Upload Debug IPA (if available)
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: QuizApp-Debug-IPA
        path: ${{ runner.temp }}/export-debug/*.ipa
        retention-days: 30

  build-signed:
    name: Build Signed iOS App
    runs-on: macos-latest
    if: github.event_name == 'workflow_dispatch' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    env:
      BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install Apple Certificate
      run: |
        if [ -n "$BUILD_CERTIFICATE_BASE64" ]; then
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          echo "CERTIFICATE_INSTALLED=true" >> $GITHUB_ENV
        else
          echo "No certificate provided, skipping code signing"
          echo "CERTIFICATE_INSTALLED=false" >> $GITHUB_ENV
        fi
        
    - name: Install Provisioning Profile
      run: |
        if [ -n "$BUILD_PROVISION_PROFILE_BASE64" ]; then
          # create variables
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision

          # import provisioning profile from secrets
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          echo "PROFILE_INSTALLED=true" >> $GITHUB_ENV
        else
          echo "No provisioning profile provided"
          echo "PROFILE_INSTALLED=false" >> $GITHUB_ENV
        fi
        
    - name: Build and Archive (Signed)
      if: env.CERTIFICATE_INSTALLED == 'true'
      run: |
        xcodebuild archive \
          -project NotesApp.xcodeproj \
          -scheme NotesApp \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          -archivePath ${{ runner.temp }}/NotesApp-Release.xcarchive
          
    - name: Export Signed IPA
      if: env.CERTIFICATE_INSTALLED == 'true'
      run: |
        xcodebuild -exportArchive \
          -archivePath ${{ runner.temp }}/NotesApp-Release.xcarchive \
          -exportPath ${{ runner.temp }}/export-release \
          -exportOptionsPlist .github/workflows/export-options-release.plist
          
    - name: Upload Signed Archive
      if: env.CERTIFICATE_INSTALLED == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: NotesApp-Release-Archive
        path: ${{ runner.temp }}/NotesApp-Release.xcarchive
        retention-days: 90
        
    - name: Upload Signed IPA
      if: env.CERTIFICATE_INSTALLED == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: NotesApp-Release-IPA
        path: ${{ runner.temp }}/export-release/*.ipa
        retention-days: 90
        
    - name: Clean up keychain
      if: always() && env.CERTIFICATE_INSTALLED == 'true'
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
